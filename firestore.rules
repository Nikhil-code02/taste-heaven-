rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Allow all operations during testing (TEMPORARY - for debugging only)
    match /{document=**} {
      allow read, write: if true;
    }

    // For user-based documents (favorites, userAddresses, userOrders, userPayments)
    match /favorites/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    match /userAddresses/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    match /userOrders/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    match /userPayments/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // For collections using random document IDs with userId field
    // These are kept for backward compatibility but will be deprecated
    match /addresses/{docId} {
      allow read: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    match /orders/{docId} {
      allow read: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    match /paymentMethods/{docId} {
      allow read: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    // Fallback rule - deny by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}